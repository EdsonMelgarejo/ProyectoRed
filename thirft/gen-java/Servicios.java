/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-29")
public class Servicios {

  public interface Iface {

    public int IniciarSesion(java.lang.String usuario, java.lang.String password) throws org.apache.thrift.TException;

    public int RegistrarPerito(java.lang.String nombre, java.lang.String apellidoP, java.lang.String apellidoM, java.lang.String cargo, java.lang.String usuario, java.lang.String password, int rol) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void IniciarSesion(java.lang.String usuario, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void RegistrarPerito(java.lang.String nombre, java.lang.String apellidoP, java.lang.String apellidoM, java.lang.String cargo, java.lang.String usuario, java.lang.String password, int rol, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int IniciarSesion(java.lang.String usuario, java.lang.String password) throws org.apache.thrift.TException
    {
      send_IniciarSesion(usuario, password);
      return recv_IniciarSesion();
    }

    public void send_IniciarSesion(java.lang.String usuario, java.lang.String password) throws org.apache.thrift.TException
    {
      IniciarSesion_args args = new IniciarSesion_args();
      args.setUsuario(usuario);
      args.setPassword(password);
      sendBase("IniciarSesion", args);
    }

    public int recv_IniciarSesion() throws org.apache.thrift.TException
    {
      IniciarSesion_result result = new IniciarSesion_result();
      receiveBase(result, "IniciarSesion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IniciarSesion failed: unknown result");
    }

    public int RegistrarPerito(java.lang.String nombre, java.lang.String apellidoP, java.lang.String apellidoM, java.lang.String cargo, java.lang.String usuario, java.lang.String password, int rol) throws org.apache.thrift.TException
    {
      send_RegistrarPerito(nombre, apellidoP, apellidoM, cargo, usuario, password, rol);
      return recv_RegistrarPerito();
    }

    public void send_RegistrarPerito(java.lang.String nombre, java.lang.String apellidoP, java.lang.String apellidoM, java.lang.String cargo, java.lang.String usuario, java.lang.String password, int rol) throws org.apache.thrift.TException
    {
      RegistrarPerito_args args = new RegistrarPerito_args();
      args.setNombre(nombre);
      args.setApellidoP(apellidoP);
      args.setApellidoM(apellidoM);
      args.setCargo(cargo);
      args.setUsuario(usuario);
      args.setPassword(password);
      args.setRol(rol);
      sendBase("RegistrarPerito", args);
    }

    public int recv_RegistrarPerito() throws org.apache.thrift.TException
    {
      RegistrarPerito_result result = new RegistrarPerito_result();
      receiveBase(result, "RegistrarPerito");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RegistrarPerito failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void IniciarSesion(java.lang.String usuario, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IniciarSesion_call method_call = new IniciarSesion_call(usuario, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IniciarSesion_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.lang.String usuario;
      private java.lang.String password;
      public IniciarSesion_call(java.lang.String usuario, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.usuario = usuario;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IniciarSesion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IniciarSesion_args args = new IniciarSesion_args();
        args.setUsuario(usuario);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IniciarSesion();
      }
    }

    public void RegistrarPerito(java.lang.String nombre, java.lang.String apellidoP, java.lang.String apellidoM, java.lang.String cargo, java.lang.String usuario, java.lang.String password, int rol, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RegistrarPerito_call method_call = new RegistrarPerito_call(nombre, apellidoP, apellidoM, cargo, usuario, password, rol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RegistrarPerito_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.lang.String nombre;
      private java.lang.String apellidoP;
      private java.lang.String apellidoM;
      private java.lang.String cargo;
      private java.lang.String usuario;
      private java.lang.String password;
      private int rol;
      public RegistrarPerito_call(java.lang.String nombre, java.lang.String apellidoP, java.lang.String apellidoM, java.lang.String cargo, java.lang.String usuario, java.lang.String password, int rol, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nombre = nombre;
        this.apellidoP = apellidoP;
        this.apellidoM = apellidoM;
        this.cargo = cargo;
        this.usuario = usuario;
        this.password = password;
        this.rol = rol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RegistrarPerito", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RegistrarPerito_args args = new RegistrarPerito_args();
        args.setNombre(nombre);
        args.setApellidoP(apellidoP);
        args.setApellidoM(apellidoM);
        args.setCargo(cargo);
        args.setUsuario(usuario);
        args.setPassword(password);
        args.setRol(rol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RegistrarPerito();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("IniciarSesion", new IniciarSesion());
      processMap.put("RegistrarPerito", new RegistrarPerito());
      return processMap;
    }

    public static class IniciarSesion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IniciarSesion_args> {
      public IniciarSesion() {
        super("IniciarSesion");
      }

      public IniciarSesion_args getEmptyArgsInstance() {
        return new IniciarSesion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public IniciarSesion_result getResult(I iface, IniciarSesion_args args) throws org.apache.thrift.TException {
        IniciarSesion_result result = new IniciarSesion_result();
        result.success = iface.IniciarSesion(args.usuario, args.password);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class RegistrarPerito<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RegistrarPerito_args> {
      public RegistrarPerito() {
        super("RegistrarPerito");
      }

      public RegistrarPerito_args getEmptyArgsInstance() {
        return new RegistrarPerito_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public RegistrarPerito_result getResult(I iface, RegistrarPerito_args args) throws org.apache.thrift.TException {
        RegistrarPerito_result result = new RegistrarPerito_result();
        result.success = iface.RegistrarPerito(args.nombre, args.apellidoP, args.apellidoM, args.cargo, args.usuario, args.password, args.rol);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("IniciarSesion", new IniciarSesion());
      processMap.put("RegistrarPerito", new RegistrarPerito());
      return processMap;
    }

    public static class IniciarSesion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, IniciarSesion_args, java.lang.Integer> {
      public IniciarSesion() {
        super("IniciarSesion");
      }

      public IniciarSesion_args getEmptyArgsInstance() {
        return new IniciarSesion_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            IniciarSesion_result result = new IniciarSesion_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            IniciarSesion_result result = new IniciarSesion_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, IniciarSesion_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.IniciarSesion(args.usuario, args.password,resultHandler);
      }
    }

    public static class RegistrarPerito<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RegistrarPerito_args, java.lang.Integer> {
      public RegistrarPerito() {
        super("RegistrarPerito");
      }

      public RegistrarPerito_args getEmptyArgsInstance() {
        return new RegistrarPerito_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            RegistrarPerito_result result = new RegistrarPerito_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            RegistrarPerito_result result = new RegistrarPerito_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, RegistrarPerito_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.RegistrarPerito(args.nombre, args.apellidoP, args.apellidoM, args.cargo, args.usuario, args.password, args.rol,resultHandler);
      }
    }

  }

  public static class IniciarSesion_args implements org.apache.thrift.TBase<IniciarSesion_args, IniciarSesion_args._Fields>, java.io.Serializable, Cloneable, Comparable<IniciarSesion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IniciarSesion_args");

    private static final org.apache.thrift.protocol.TField USUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("usuario", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IniciarSesion_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IniciarSesion_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String usuario; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USUARIO((short)1, "usuario"),
      PASSWORD((short)2, "password");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USUARIO
            return USUARIO;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USUARIO, new org.apache.thrift.meta_data.FieldMetaData("usuario", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IniciarSesion_args.class, metaDataMap);
    }

    public IniciarSesion_args() {
    }

    public IniciarSesion_args(
      java.lang.String usuario,
      java.lang.String password)
    {
      this();
      this.usuario = usuario;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IniciarSesion_args(IniciarSesion_args other) {
      if (other.isSetUsuario()) {
        this.usuario = other.usuario;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public IniciarSesion_args deepCopy() {
      return new IniciarSesion_args(this);
    }

    @Override
    public void clear() {
      this.usuario = null;
      this.password = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUsuario() {
      return this.usuario;
    }

    public IniciarSesion_args setUsuario(@org.apache.thrift.annotation.Nullable java.lang.String usuario) {
      this.usuario = usuario;
      return this;
    }

    public void unsetUsuario() {
      this.usuario = null;
    }

    /** Returns true if field usuario is set (has been assigned a value) and false otherwise */
    public boolean isSetUsuario() {
      return this.usuario != null;
    }

    public void setUsuarioIsSet(boolean value) {
      if (!value) {
        this.usuario = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPassword() {
      return this.password;
    }

    public IniciarSesion_args setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USUARIO:
        if (value == null) {
          unsetUsuario();
        } else {
          setUsuario((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USUARIO:
        return getUsuario();

      case PASSWORD:
        return getPassword();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USUARIO:
        return isSetUsuario();
      case PASSWORD:
        return isSetPassword();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof IniciarSesion_args)
        return this.equals((IniciarSesion_args)that);
      return false;
    }

    public boolean equals(IniciarSesion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_usuario = true && this.isSetUsuario();
      boolean that_present_usuario = true && that.isSetUsuario();
      if (this_present_usuario || that_present_usuario) {
        if (!(this_present_usuario && that_present_usuario))
          return false;
        if (!this.usuario.equals(that.usuario))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUsuario()) ? 131071 : 524287);
      if (isSetUsuario())
        hashCode = hashCode * 8191 + usuario.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(IniciarSesion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUsuario()).compareTo(other.isSetUsuario());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsuario()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usuario, other.usuario);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("IniciarSesion_args(");
      boolean first = true;

      sb.append("usuario:");
      if (this.usuario == null) {
        sb.append("null");
      } else {
        sb.append(this.usuario);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IniciarSesion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public IniciarSesion_argsStandardScheme getScheme() {
        return new IniciarSesion_argsStandardScheme();
      }
    }

    private static class IniciarSesion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<IniciarSesion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IniciarSesion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USUARIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.usuario = iprot.readString();
                struct.setUsuarioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IniciarSesion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.usuario != null) {
          oprot.writeFieldBegin(USUARIO_FIELD_DESC);
          oprot.writeString(struct.usuario);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IniciarSesion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public IniciarSesion_argsTupleScheme getScheme() {
        return new IniciarSesion_argsTupleScheme();
      }
    }

    private static class IniciarSesion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<IniciarSesion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IniciarSesion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUsuario()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUsuario()) {
          oprot.writeString(struct.usuario);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IniciarSesion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.usuario = iprot.readString();
          struct.setUsuarioIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class IniciarSesion_result implements org.apache.thrift.TBase<IniciarSesion_result, IniciarSesion_result._Fields>, java.io.Serializable, Cloneable, Comparable<IniciarSesion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IniciarSesion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IniciarSesion_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IniciarSesion_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IniciarSesion_result.class, metaDataMap);
    }

    public IniciarSesion_result() {
    }

    public IniciarSesion_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IniciarSesion_result(IniciarSesion_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public IniciarSesion_result deepCopy() {
      return new IniciarSesion_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public IniciarSesion_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof IniciarSesion_result)
        return this.equals((IniciarSesion_result)that);
      return false;
    }

    public boolean equals(IniciarSesion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(IniciarSesion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("IniciarSesion_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IniciarSesion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public IniciarSesion_resultStandardScheme getScheme() {
        return new IniciarSesion_resultStandardScheme();
      }
    }

    private static class IniciarSesion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<IniciarSesion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IniciarSesion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IniciarSesion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IniciarSesion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public IniciarSesion_resultTupleScheme getScheme() {
        return new IniciarSesion_resultTupleScheme();
      }
    }

    private static class IniciarSesion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<IniciarSesion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IniciarSesion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IniciarSesion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class RegistrarPerito_args implements org.apache.thrift.TBase<RegistrarPerito_args, RegistrarPerito_args._Fields>, java.io.Serializable, Cloneable, Comparable<RegistrarPerito_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegistrarPerito_args");

    private static final org.apache.thrift.protocol.TField NOMBRE_FIELD_DESC = new org.apache.thrift.protocol.TField("nombre", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APELLIDO_P_FIELD_DESC = new org.apache.thrift.protocol.TField("apellidoP", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField APELLIDO_M_FIELD_DESC = new org.apache.thrift.protocol.TField("apellidoM", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CARGO_FIELD_DESC = new org.apache.thrift.protocol.TField("cargo", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField USUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("usuario", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField ROL_FIELD_DESC = new org.apache.thrift.protocol.TField("rol", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RegistrarPerito_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RegistrarPerito_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String nombre; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String apellidoP; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String apellidoM; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String cargo; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String usuario; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String password; // required
    public int rol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOMBRE((short)1, "nombre"),
      APELLIDO_P((short)2, "apellidoP"),
      APELLIDO_M((short)3, "apellidoM"),
      CARGO((short)4, "cargo"),
      USUARIO((short)5, "usuario"),
      PASSWORD((short)6, "password"),
      ROL((short)7, "rol");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOMBRE
            return NOMBRE;
          case 2: // APELLIDO_P
            return APELLIDO_P;
          case 3: // APELLIDO_M
            return APELLIDO_M;
          case 4: // CARGO
            return CARGO;
          case 5: // USUARIO
            return USUARIO;
          case 6: // PASSWORD
            return PASSWORD;
          case 7: // ROL
            return ROL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROL_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOMBRE, new org.apache.thrift.meta_data.FieldMetaData("nombre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APELLIDO_P, new org.apache.thrift.meta_data.FieldMetaData("apellidoP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APELLIDO_M, new org.apache.thrift.meta_data.FieldMetaData("apellidoM", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CARGO, new org.apache.thrift.meta_data.FieldMetaData("cargo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USUARIO, new org.apache.thrift.meta_data.FieldMetaData("usuario", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROL, new org.apache.thrift.meta_data.FieldMetaData("rol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegistrarPerito_args.class, metaDataMap);
    }

    public RegistrarPerito_args() {
    }

    public RegistrarPerito_args(
      java.lang.String nombre,
      java.lang.String apellidoP,
      java.lang.String apellidoM,
      java.lang.String cargo,
      java.lang.String usuario,
      java.lang.String password,
      int rol)
    {
      this();
      this.nombre = nombre;
      this.apellidoP = apellidoP;
      this.apellidoM = apellidoM;
      this.cargo = cargo;
      this.usuario = usuario;
      this.password = password;
      this.rol = rol;
      setRolIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RegistrarPerito_args(RegistrarPerito_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetNombre()) {
        this.nombre = other.nombre;
      }
      if (other.isSetApellidoP()) {
        this.apellidoP = other.apellidoP;
      }
      if (other.isSetApellidoM()) {
        this.apellidoM = other.apellidoM;
      }
      if (other.isSetCargo()) {
        this.cargo = other.cargo;
      }
      if (other.isSetUsuario()) {
        this.usuario = other.usuario;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      this.rol = other.rol;
    }

    public RegistrarPerito_args deepCopy() {
      return new RegistrarPerito_args(this);
    }

    @Override
    public void clear() {
      this.nombre = null;
      this.apellidoP = null;
      this.apellidoM = null;
      this.cargo = null;
      this.usuario = null;
      this.password = null;
      setRolIsSet(false);
      this.rol = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getNombre() {
      return this.nombre;
    }

    public RegistrarPerito_args setNombre(@org.apache.thrift.annotation.Nullable java.lang.String nombre) {
      this.nombre = nombre;
      return this;
    }

    public void unsetNombre() {
      this.nombre = null;
    }

    /** Returns true if field nombre is set (has been assigned a value) and false otherwise */
    public boolean isSetNombre() {
      return this.nombre != null;
    }

    public void setNombreIsSet(boolean value) {
      if (!value) {
        this.nombre = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getApellidoP() {
      return this.apellidoP;
    }

    public RegistrarPerito_args setApellidoP(@org.apache.thrift.annotation.Nullable java.lang.String apellidoP) {
      this.apellidoP = apellidoP;
      return this;
    }

    public void unsetApellidoP() {
      this.apellidoP = null;
    }

    /** Returns true if field apellidoP is set (has been assigned a value) and false otherwise */
    public boolean isSetApellidoP() {
      return this.apellidoP != null;
    }

    public void setApellidoPIsSet(boolean value) {
      if (!value) {
        this.apellidoP = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getApellidoM() {
      return this.apellidoM;
    }

    public RegistrarPerito_args setApellidoM(@org.apache.thrift.annotation.Nullable java.lang.String apellidoM) {
      this.apellidoM = apellidoM;
      return this;
    }

    public void unsetApellidoM() {
      this.apellidoM = null;
    }

    /** Returns true if field apellidoM is set (has been assigned a value) and false otherwise */
    public boolean isSetApellidoM() {
      return this.apellidoM != null;
    }

    public void setApellidoMIsSet(boolean value) {
      if (!value) {
        this.apellidoM = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCargo() {
      return this.cargo;
    }

    public RegistrarPerito_args setCargo(@org.apache.thrift.annotation.Nullable java.lang.String cargo) {
      this.cargo = cargo;
      return this;
    }

    public void unsetCargo() {
      this.cargo = null;
    }

    /** Returns true if field cargo is set (has been assigned a value) and false otherwise */
    public boolean isSetCargo() {
      return this.cargo != null;
    }

    public void setCargoIsSet(boolean value) {
      if (!value) {
        this.cargo = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUsuario() {
      return this.usuario;
    }

    public RegistrarPerito_args setUsuario(@org.apache.thrift.annotation.Nullable java.lang.String usuario) {
      this.usuario = usuario;
      return this;
    }

    public void unsetUsuario() {
      this.usuario = null;
    }

    /** Returns true if field usuario is set (has been assigned a value) and false otherwise */
    public boolean isSetUsuario() {
      return this.usuario != null;
    }

    public void setUsuarioIsSet(boolean value) {
      if (!value) {
        this.usuario = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPassword() {
      return this.password;
    }

    public RegistrarPerito_args setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public int getRol() {
      return this.rol;
    }

    public RegistrarPerito_args setRol(int rol) {
      this.rol = rol;
      setRolIsSet(true);
      return this;
    }

    public void unsetRol() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROL_ISSET_ID);
    }

    /** Returns true if field rol is set (has been assigned a value) and false otherwise */
    public boolean isSetRol() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROL_ISSET_ID);
    }

    public void setRolIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case NOMBRE:
        if (value == null) {
          unsetNombre();
        } else {
          setNombre((java.lang.String)value);
        }
        break;

      case APELLIDO_P:
        if (value == null) {
          unsetApellidoP();
        } else {
          setApellidoP((java.lang.String)value);
        }
        break;

      case APELLIDO_M:
        if (value == null) {
          unsetApellidoM();
        } else {
          setApellidoM((java.lang.String)value);
        }
        break;

      case CARGO:
        if (value == null) {
          unsetCargo();
        } else {
          setCargo((java.lang.String)value);
        }
        break;

      case USUARIO:
        if (value == null) {
          unsetUsuario();
        } else {
          setUsuario((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case ROL:
        if (value == null) {
          unsetRol();
        } else {
          setRol((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOMBRE:
        return getNombre();

      case APELLIDO_P:
        return getApellidoP();

      case APELLIDO_M:
        return getApellidoM();

      case CARGO:
        return getCargo();

      case USUARIO:
        return getUsuario();

      case PASSWORD:
        return getPassword();

      case ROL:
        return getRol();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOMBRE:
        return isSetNombre();
      case APELLIDO_P:
        return isSetApellidoP();
      case APELLIDO_M:
        return isSetApellidoM();
      case CARGO:
        return isSetCargo();
      case USUARIO:
        return isSetUsuario();
      case PASSWORD:
        return isSetPassword();
      case ROL:
        return isSetRol();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof RegistrarPerito_args)
        return this.equals((RegistrarPerito_args)that);
      return false;
    }

    public boolean equals(RegistrarPerito_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nombre = true && this.isSetNombre();
      boolean that_present_nombre = true && that.isSetNombre();
      if (this_present_nombre || that_present_nombre) {
        if (!(this_present_nombre && that_present_nombre))
          return false;
        if (!this.nombre.equals(that.nombre))
          return false;
      }

      boolean this_present_apellidoP = true && this.isSetApellidoP();
      boolean that_present_apellidoP = true && that.isSetApellidoP();
      if (this_present_apellidoP || that_present_apellidoP) {
        if (!(this_present_apellidoP && that_present_apellidoP))
          return false;
        if (!this.apellidoP.equals(that.apellidoP))
          return false;
      }

      boolean this_present_apellidoM = true && this.isSetApellidoM();
      boolean that_present_apellidoM = true && that.isSetApellidoM();
      if (this_present_apellidoM || that_present_apellidoM) {
        if (!(this_present_apellidoM && that_present_apellidoM))
          return false;
        if (!this.apellidoM.equals(that.apellidoM))
          return false;
      }

      boolean this_present_cargo = true && this.isSetCargo();
      boolean that_present_cargo = true && that.isSetCargo();
      if (this_present_cargo || that_present_cargo) {
        if (!(this_present_cargo && that_present_cargo))
          return false;
        if (!this.cargo.equals(that.cargo))
          return false;
      }

      boolean this_present_usuario = true && this.isSetUsuario();
      boolean that_present_usuario = true && that.isSetUsuario();
      if (this_present_usuario || that_present_usuario) {
        if (!(this_present_usuario && that_present_usuario))
          return false;
        if (!this.usuario.equals(that.usuario))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_rol = true;
      boolean that_present_rol = true;
      if (this_present_rol || that_present_rol) {
        if (!(this_present_rol && that_present_rol))
          return false;
        if (this.rol != that.rol)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNombre()) ? 131071 : 524287);
      if (isSetNombre())
        hashCode = hashCode * 8191 + nombre.hashCode();

      hashCode = hashCode * 8191 + ((isSetApellidoP()) ? 131071 : 524287);
      if (isSetApellidoP())
        hashCode = hashCode * 8191 + apellidoP.hashCode();

      hashCode = hashCode * 8191 + ((isSetApellidoM()) ? 131071 : 524287);
      if (isSetApellidoM())
        hashCode = hashCode * 8191 + apellidoM.hashCode();

      hashCode = hashCode * 8191 + ((isSetCargo()) ? 131071 : 524287);
      if (isSetCargo())
        hashCode = hashCode * 8191 + cargo.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsuario()) ? 131071 : 524287);
      if (isSetUsuario())
        hashCode = hashCode * 8191 + usuario.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + rol;

      return hashCode;
    }

    @Override
    public int compareTo(RegistrarPerito_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNombre()).compareTo(other.isSetNombre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNombre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nombre, other.nombre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetApellidoP()).compareTo(other.isSetApellidoP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApellidoP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apellidoP, other.apellidoP);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetApellidoM()).compareTo(other.isSetApellidoM());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApellidoM()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apellidoM, other.apellidoM);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCargo()).compareTo(other.isSetCargo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCargo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cargo, other.cargo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUsuario()).compareTo(other.isSetUsuario());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsuario()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usuario, other.usuario);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRol()).compareTo(other.isSetRol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rol, other.rol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RegistrarPerito_args(");
      boolean first = true;

      sb.append("nombre:");
      if (this.nombre == null) {
        sb.append("null");
      } else {
        sb.append(this.nombre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apellidoP:");
      if (this.apellidoP == null) {
        sb.append("null");
      } else {
        sb.append(this.apellidoP);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apellidoM:");
      if (this.apellidoM == null) {
        sb.append("null");
      } else {
        sb.append(this.apellidoM);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cargo:");
      if (this.cargo == null) {
        sb.append("null");
      } else {
        sb.append(this.cargo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("usuario:");
      if (this.usuario == null) {
        sb.append("null");
      } else {
        sb.append(this.usuario);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rol:");
      sb.append(this.rol);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RegistrarPerito_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RegistrarPerito_argsStandardScheme getScheme() {
        return new RegistrarPerito_argsStandardScheme();
      }
    }

    private static class RegistrarPerito_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<RegistrarPerito_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RegistrarPerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOMBRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nombre = iprot.readString();
                struct.setNombreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APELLIDO_P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apellidoP = iprot.readString();
                struct.setApellidoPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APELLIDO_M
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apellidoM = iprot.readString();
                struct.setApellidoMIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CARGO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cargo = iprot.readString();
                struct.setCargoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // USUARIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.usuario = iprot.readString();
                struct.setUsuarioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ROL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rol = iprot.readI32();
                struct.setRolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RegistrarPerito_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nombre != null) {
          oprot.writeFieldBegin(NOMBRE_FIELD_DESC);
          oprot.writeString(struct.nombre);
          oprot.writeFieldEnd();
        }
        if (struct.apellidoP != null) {
          oprot.writeFieldBegin(APELLIDO_P_FIELD_DESC);
          oprot.writeString(struct.apellidoP);
          oprot.writeFieldEnd();
        }
        if (struct.apellidoM != null) {
          oprot.writeFieldBegin(APELLIDO_M_FIELD_DESC);
          oprot.writeString(struct.apellidoM);
          oprot.writeFieldEnd();
        }
        if (struct.cargo != null) {
          oprot.writeFieldBegin(CARGO_FIELD_DESC);
          oprot.writeString(struct.cargo);
          oprot.writeFieldEnd();
        }
        if (struct.usuario != null) {
          oprot.writeFieldBegin(USUARIO_FIELD_DESC);
          oprot.writeString(struct.usuario);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ROL_FIELD_DESC);
        oprot.writeI32(struct.rol);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RegistrarPerito_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RegistrarPerito_argsTupleScheme getScheme() {
        return new RegistrarPerito_argsTupleScheme();
      }
    }

    private static class RegistrarPerito_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<RegistrarPerito_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RegistrarPerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNombre()) {
          optionals.set(0);
        }
        if (struct.isSetApellidoP()) {
          optionals.set(1);
        }
        if (struct.isSetApellidoM()) {
          optionals.set(2);
        }
        if (struct.isSetCargo()) {
          optionals.set(3);
        }
        if (struct.isSetUsuario()) {
          optionals.set(4);
        }
        if (struct.isSetPassword()) {
          optionals.set(5);
        }
        if (struct.isSetRol()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetNombre()) {
          oprot.writeString(struct.nombre);
        }
        if (struct.isSetApellidoP()) {
          oprot.writeString(struct.apellidoP);
        }
        if (struct.isSetApellidoM()) {
          oprot.writeString(struct.apellidoM);
        }
        if (struct.isSetCargo()) {
          oprot.writeString(struct.cargo);
        }
        if (struct.isSetUsuario()) {
          oprot.writeString(struct.usuario);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetRol()) {
          oprot.writeI32(struct.rol);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RegistrarPerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.nombre = iprot.readString();
          struct.setNombreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.apellidoP = iprot.readString();
          struct.setApellidoPIsSet(true);
        }
        if (incoming.get(2)) {
          struct.apellidoM = iprot.readString();
          struct.setApellidoMIsSet(true);
        }
        if (incoming.get(3)) {
          struct.cargo = iprot.readString();
          struct.setCargoIsSet(true);
        }
        if (incoming.get(4)) {
          struct.usuario = iprot.readString();
          struct.setUsuarioIsSet(true);
        }
        if (incoming.get(5)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(6)) {
          struct.rol = iprot.readI32();
          struct.setRolIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class RegistrarPerito_result implements org.apache.thrift.TBase<RegistrarPerito_result, RegistrarPerito_result._Fields>, java.io.Serializable, Cloneable, Comparable<RegistrarPerito_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegistrarPerito_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RegistrarPerito_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RegistrarPerito_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegistrarPerito_result.class, metaDataMap);
    }

    public RegistrarPerito_result() {
    }

    public RegistrarPerito_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RegistrarPerito_result(RegistrarPerito_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public RegistrarPerito_result deepCopy() {
      return new RegistrarPerito_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public RegistrarPerito_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof RegistrarPerito_result)
        return this.equals((RegistrarPerito_result)that);
      return false;
    }

    public boolean equals(RegistrarPerito_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(RegistrarPerito_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RegistrarPerito_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RegistrarPerito_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RegistrarPerito_resultStandardScheme getScheme() {
        return new RegistrarPerito_resultStandardScheme();
      }
    }

    private static class RegistrarPerito_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<RegistrarPerito_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RegistrarPerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RegistrarPerito_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RegistrarPerito_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RegistrarPerito_resultTupleScheme getScheme() {
        return new RegistrarPerito_resultTupleScheme();
      }
    }

    private static class RegistrarPerito_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<RegistrarPerito_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RegistrarPerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RegistrarPerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
